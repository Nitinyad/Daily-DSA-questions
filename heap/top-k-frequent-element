
//LEETCODE QUESTION LINK : https://leetcode.com/problems/top-k-frequent-elements/description/


class Solution {
public:
    static bool cmp(const pair<int, int>& a, const pair<int, int>& b) {
        return a.second > b.second;
    }
    vector<int> topKFrequent(vector<int>& nums, int k) {

        //SECOND SOLUTION
        // map<int, int> mp;
        // for (auto x : nums) {
        //     mp[x]++;
        // }
        // vector<pair<int, int>> v(mp.begin(), mp.end());
        // sort(v.begin(), v.end(), cmp);

        // vector<int> ans;

        // for (int i = 0; i < k; i++) {
        //     ans.push_back(v[i].first);
        // }
        // return ans;

        //FIRST SOLUTION USING MIN HEAP
        map<int,int>mpp;
        for(auto it : nums){
            mpp[it]++;
        }
        vector<int> ans;
        priority_queue<pair<int,int> , vector<pair<int,int>> , greater<pair<int,int>> > minh;
        for(auto it : mpp){
            minh.push({it.second ,it.first});
            if(minh.size() > k){
                minh.pop();
            }
        }
        while(!minh.empty()){
            ans.push_back(minh.top().second);
            minh.pop();
        }
        return ans;
        
    }
};

